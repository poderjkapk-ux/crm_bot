# admin_handlers.py

import logging
from aiogram import F, Dispatcher, Bot, html
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder, KeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import joinedload
from urllib.parse import quote_plus

from models import Order, Product, Category, OrderStatus, Employee, Role, Settings, OrderStatusHistory
from courier_handlers import get_operator_keyboard, get_staff_login_keyboard, get_courier_keyboard
from notification_manager import notify_all_parties_on_status_change

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class AdminEditOrderStates(StatesGroup):
    waiting_for_new_name = State()
    waiting_for_new_phone = State()
    waiting_for_new_address = State()

class OperatorAuthStates(StatesGroup):
    waiting_for_phone = State()

def parse_products_string(products_str: str) -> dict[str, int]:
    """–†–∞–∑–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É '–ù–∞–∑–≤–∞–Ω–∏–µ x –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, ...' –Ω–∞ —Å–ª–æ–≤–∞—Ä—å."""
    if not products_str: return {}
    products_dict = {}
    for part in products_str.split(', '):
        try:
            name, quantity_str = part.rsplit(' x ', 1)
            products_dict[name] = int(quantity_str)
        except ValueError:
            logging.warning(f"Could not parse product string part: {part}")
    return products_dict

def build_products_string(products_dict: dict[str, int]) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É '–ù–∞–∑–≤–∞–Ω–∏–µ x –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, ...'."""
    return ", ".join([f"{name} x {quantity}" for name, quantity in products_dict.items()])

async def recalculate_order_total(products_dict: dict[str, int], session: AsyncSession) -> int:
    """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞."""
    total = 0
    if not products_dict: return 0
    products_res = await session.execute(select(Product).where(Product.name.in_(list(products_dict.keys()))))
    db_products = {p.name: p for p in products_res.scalars().all()}
    for name, quantity in products_dict.items():
        if product := db_products.get(name):
            total += product.price * quantity
    return total

async def _generate_order_admin_view(order: Order, session: AsyncSession):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –∞–¥–º–∏–Ω-–±–æ—Ç–µ."""
    await session.refresh(order, ['status', 'courier'])
    status_name = order.status.name if order.status else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
    delivery_info = f"–ê–¥—Ä–µ—Å: {html.quote(order.address or '–ù–µ —É–∫–∞–∑–∞–Ω')}" if order.is_delivery else '–°–∞–º–æ–≤—ã–≤–æ–∑'
    time_info = f"–í—Ä–µ–º—è: {html.quote(order.delivery_time)}"
    source = f"–ò—Å—Ç–æ—á–Ω–∏–∫: {'–°–∞–π—Ç' if order.user_id is None else 'Telegram-–±–æ—Ç'}"
    courier_info = order.courier.full_name if order.courier else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
    products_formatted = "- " + html.quote(order.products or '').replace(", ", "\n- ")

    admin_text = (f"<b>–ó–∞–∫–∞–∑ #{order.id}</b> ({source})\n\n"
                  f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {html.quote(order.customer_name)}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {html.quote(order.phone_number)}\n"
                  f"<b>{delivery_info}</b>\n<b>{time_info}</b>\n"
                  f"<b>–ö—É—Ä—å–µ—Ä:</b> {courier_info}\n\n"
                  f"<b>–ë–ª—é–¥–∞:</b>\n{products_formatted}\n\n<b>–°—É–º–º–∞:</b> {order.total_price} –≥—Ä–Ω\n\n"
                  f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_name}")

    kb_admin = InlineKeyboardBuilder()
    statuses_res = await session.execute(
        select(OrderStatus).where(OrderStatus.visible_to_operator == True).order_by(OrderStatus.id)
    )
    statuses = statuses_res.scalars().all()
    status_buttons = [
        InlineKeyboardButton(text=f"{'‚úÖ ' if s.id == order.status_id else ''}{s.name}", callback_data=f"change_order_status_{order.id}_{s.id}")
        for s in statuses
    ]
    for i in range(0, len(status_buttons), 2):
        kb_admin.row(*status_buttons[i:i+2])

    courier_button_text = f"üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ ({order.courier.full_name if order.courier else '–í—ã–±–µ—Ä–∏—Ç–µ'})"
    kb_admin.row(InlineKeyboardButton(text=courier_button_text, callback_data=f"select_courier_{order.id}"))
    kb_admin.row(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑", callback_data=f"edit_order_{order.id}"))
    return admin_text, kb_admin.as_markup()

async def _display_order_view(bot: Bot, chat_id: int, message_id: int, order_id: int, session: AsyncSession):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞."""
    order = await session.get(Order, order_id)
    if not order: return
    admin_text, kb_admin = await _generate_order_admin_view(order, session)
    try:
        await bot.edit_message_text(text=admin_text, chat_id=chat_id, message_id=message_id, reply_markup=kb_admin)
    except TelegramBadRequest as e:
        logger.error(f"Failed to edit message in _display_order_view: {e}")

async def _display_edit_items_menu(bot: Bot, chat_id: int, message_id: int, order_id: int, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ –∑–∞–∫–∞–∑–∞."""
    order = await session.get(Order, order_id)
    if not order: return
    products_dict = parse_products_string(order.products)
    text = f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ #{order.id}</b> (–°—É–º–º–∞: {order.total_price} –≥—Ä–Ω)\n\n"
    kb = InlineKeyboardBuilder()
    if not products_dict:
        text += "<i>–ó–∞–∫–∞–∑ –ø—É—Å—Ç</i>"
    else:
        product_names = list(products_dict.keys())
        products_res = await session.execute(select(Product).where(Product.name.in_(product_names)))
        db_products = {p.name: p for p in products_res.scalars().all()}
        for name, quantity in products_dict.items():
            if product := db_products.get(name):
                kb.row(
                    InlineKeyboardButton(text="‚ûñ", callback_data=f"admin_change_qnt_{order.id}_{product.id}_-1"),
                    InlineKeyboardButton(text=f"{html.quote(name)}: {quantity}", callback_data="noop"),
                    InlineKeyboardButton(text="‚ûï", callback_data=f"admin_change_qnt_{order.id}_{product.id}_1"),
                    InlineKeyboardButton(text="‚ùå", callback_data=f"admin_delete_item_{order.id}_{product.id}")
                )
    kb.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data=f"admin_add_item_start_{order_id}"))
    kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_order_{order_id}"))
    await bot.edit_message_text(text=text, chat_id=chat_id, message_id=message_id, reply_markup=kb.as_markup())

async def _display_edit_customer_menu(bot: Bot, chat_id: int, message_id: int, order_id: int, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞."""
    order = await session.get(Order, order_id)
    if not order: return

    text = (f"<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–ó–∞–∫–∞–∑ #{order.id})</b>\n\n"
            f"<b>–¢–µ–∫—É—â–µ–µ –∏–º—è:</b> {html.quote(order.customer_name)}\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {html.quote(order.phone_number)}")

    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"change_name_start_{order_id}"),
           InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data=f"change_phone_start_{order_id}"))
    kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_order_{order_id}"))

    await bot.edit_message_text(
        text=text,
        chat_id=chat_id,
        message_id=message_id,
        reply_markup=kb.as_markup()
    )

async def _display_edit_delivery_menu(bot: Bot, chat_id: int, message_id: int, order_id: int, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏/—Å–∞–º–æ–≤—ã–≤–æ–∑–∞."""
    order = await session.get(Order, order_id)
    if not order: return

    delivery_type_str = "üöö –î–æ—Å—Ç–∞–≤–∫–∞" if order.is_delivery else "üè† –°–∞–º–æ–≤—ã–≤–æ–∑"
    text = (f"<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ (–ó–∞–∫–∞–∑ #{order.id})</b>\n\n"
            f"<b>–¢–∏–ø:</b> {delivery_type_str}\n"
            f"<b>–ê–¥—Ä–µ—Å:</b> {html.quote(order.address or '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"<b>–í—Ä–µ–º—è:</b> {html.quote(order.delivery_time or '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ')}")

    kb = InlineKeyboardBuilder()
    toggle_text = "–°–¥–µ–ª–∞—Ç—å –°–∞–º–æ–≤—ã–≤–æ–∑–æ–º" if order.is_delivery else "–°–¥–µ–ª–∞—Ç—å –î–æ—Å—Ç–∞–≤–∫–æ–π"
    kb.row(InlineKeyboardButton(text=toggle_text, callback_data=f"toggle_delivery_type_{order.id}"))
    if order.is_delivery:
        kb.row(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data=f"change_address_start_{order_id}"))
    kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_order_{order_id}"))

    await bot.edit_message_text(
        text=text,
        chat_id=chat_id,
        message_id=message_id,
        reply_markup=kb.as_markup()
    )


def register_admin_handlers(dp: Dispatcher):
    @dp.message(F.text == "üîê –í—Ö–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
    async def operator_login_start(message: Message, state: FSMContext, session: AsyncSession):
        employee = await session.scalar(select(Employee).where(Employee.telegram_user_id == message.from_user.id).options(joinedload(Employee.role)))
        if employee:
            if employee.role.can_manage_orders:
                return await message.answer(f"‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä.", reply_markup=get_operator_keyboard(employee.is_on_shift))
            elif employee.role.can_be_assigned:
                return await message.answer("‚ùå –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∫—É—Ä—å–µ—Ä. –î–ª—è –≤—Ö–æ–¥–∞ –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.", reply_markup=get_courier_keyboard(employee.is_on_shift))
        await state.set_state(OperatorAuthStates.waiting_for_phone)
        kb = InlineKeyboardBuilder().add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_auth")).as_markup()
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–æ–ª–∏ **–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞**:", reply_markup=kb)

    @dp.message(OperatorAuthStates.waiting_for_phone)
    async def process_operator_phone(message: Message, state: FSMContext, session: AsyncSession):
        phone = message.text.strip()
        employee = await session.scalar(select(Employee).options(joinedload(Employee.role)).where(Employee.phone_number == phone))
        if employee and employee.role.can_manage_orders:
            employee.telegram_user_id = message.from_user.id
            await session.commit()
            await state.clear()
            await message.answer(f"üéâ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {employee.full_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {employee.role.name}.", reply_markup=get_operator_keyboard(employee.is_on_shift))
        else:
            await message.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –û–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
    
    @dp.callback_query(F.data.startswith("change_order_status_"))
    async def change_order_status_admin(callback: CallbackQuery, session: AsyncSession):
        client_bot = dp.get("client_bot")
        employee = await session.scalar(select(Employee).where(Employee.telegram_user_id == callback.from_user.id))
        actor_info = f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {employee.full_name}" if employee else f"–û–ø–µ—Ä–∞—Ç–æ—Ä (ID: {callback.from_user.id})"
        
        parts = callback.data.split("_")
        order_id, new_status_id = int(parts[3]), int(parts[4])

        order = await session.get(Order, order_id)
        if not order: return await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        if order.status_id == new_status_id: return await callback.answer("–°—Ç–∞—Ç—É—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

        old_status = await session.get(OrderStatus, order.status_id)
        old_status_name = old_status.name if old_status else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'

        order.status_id = new_status_id
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        history_entry = OrderStatusHistory(
            order_id=order.id,
            status_id=new_status_id,
            actor_info=actor_info
        )
        session.add(history_entry)
        
        await session.commit()
        
        await notify_all_parties_on_status_change(
            order=order,
            old_status_name=old_status_name,
            actor_info=actor_info,
            admin_bot=callback.bot,
            client_bot=client_bot,
            session=session
        )
        
        await _display_order_view(callback.bot, callback.message.chat.id, callback.message.message_id, order_id, session)
        await callback.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order.id} –∏–∑–º–µ–Ω–µ–Ω.")

    @dp.callback_query(F.data.startswith("edit_order_"))
    async def show_edit_order_menu(callback: CallbackQuery):
        order_id = int(callback.data.split("_")[2])
        kb = InlineKeyboardBuilder()
        kb.row(InlineKeyboardButton(text="üë§ –ö–ª–∏–µ–Ω—Ç", callback_data=f"edit_customer_{order_id}"),
               InlineKeyboardButton(text="üçî –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞", callback_data=f"edit_items_{order_id}"))
        kb.row(InlineKeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data=f"edit_delivery_{order_id}"))
        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑—É", callback_data=f"view_order_{order_id}"))
        await callback.message.edit_text(f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=kb.as_markup())
        await callback.answer()

    @dp.callback_query(F.data.startswith("view_order_"))
    async def back_to_order_view(callback: CallbackQuery, session: AsyncSession):
        order_id = int(callback.data.split("_")[2])
        await _display_order_view(callback.bot, callback.message.chat.id, callback.message.message_id, order_id, session)
        await callback.answer()

    @dp.callback_query(F.data.startswith("edit_customer_"))
    async def edit_customer_menu_handler(callback: CallbackQuery, session: AsyncSession):
        order_id = int(callback.data.split("_")[2])
        await _display_edit_customer_menu(callback.bot, callback.message.chat.id, callback.message.message_id, order_id, session)
        await callback.answer()

    @dp.callback_query(F.data.startswith("edit_items_"))
    async def edit_items_menu_handler(callback: CallbackQuery, session: AsyncSession):
        order_id = int(callback.data.split("_")[2])
        await _display_edit_items_menu(callback.bot, callback.message.chat.id, callback.message.message_id, order_id, session)
        await callback.answer()

    @dp.callback_query(F.data.startswith("edit_delivery_"))
    async def edit_delivery_menu_handler(callback: CallbackQuery, session: AsyncSession):
        order_id = int(callback.data.split("_")[2])
        await _display_edit_delivery_menu(callback.bot, callback.message.chat.id, callback.message.message_id, order_id, session)
        await callback.answer()

    async def start_fsm_for_edit(callback: CallbackQuery, state: FSMContext, new_state: State, prompt_text: str):
        order_id = int(callback.data.split("_")[-1])
        await state.set_state(new_state)
        await state.update_data(order_id=order_id, message_id=callback.message.message_id)
        await callback.message.edit_text(f"<b>–ó–∞–∫–∞–∑ #{order_id}</b>: {prompt_text}")
        await callback.answer()

    @dp.callback_query(F.data.startswith("change_name_start_"))
    async def change_name_start(callback: CallbackQuery, state: FSMContext):
        await start_fsm_for_edit(callback, state, AdminEditOrderStates.waiting_for_new_name, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞.")

    @dp.callback_query(F.data.startswith("change_phone_start_"))
    async def change_phone_start(callback: CallbackQuery, state: FSMContext):
        await start_fsm_for_edit(callback, state, AdminEditOrderStates.waiting_for_new_phone, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

    @dp.callback_query(F.data.startswith("change_address_start_"))
    async def change_address_start(callback: CallbackQuery, state: FSMContext):
        await start_fsm_for_edit(callback, state, AdminEditOrderStates.waiting_for_new_address, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.")

    async def process_fsm_for_edit(message: Message, state: FSMContext, session: AsyncSession, field_to_update: str, menu_to_return_func):
        data = await state.get_data()
        order_id, message_id = data['order_id'], data['message_id']
        order = await session.get(Order, order_id)
        if order:
            setattr(order, field_to_update, message.text)
            await session.commit()
        await state.clear()
        try: await message.delete()
        except TelegramBadRequest: pass
        await menu_to_return_func(message.bot, message.chat.id, message_id, order_id, session)

    @dp.message(AdminEditOrderStates.waiting_for_new_name)
    async def process_new_name(message: Message, state: FSMContext, session: AsyncSession):
        await process_fsm_for_edit(message, state, session, 'customer_name', _display_edit_customer_menu)

    @dp.message(AdminEditOrderStates.waiting_for_new_phone)
    async def process_new_phone(message: Message, state: FSMContext, session: AsyncSession):
        await process_fsm_for_edit(message, state, session, 'phone_number', _display_edit_customer_menu)

    @dp.message(AdminEditOrderStates.waiting_for_new_address)
    async def process_new_address(message: Message, state: FSMContext, session: AsyncSession):
        await process_fsm_for_edit(message, state, session, 'address', _display_edit_delivery_menu)

    @dp.callback_query(F.data.startswith("admin_change_qnt_") | F.data.startswith("admin_delete_item_"))
    async def admin_modify_item(callback: CallbackQuery, session: AsyncSession):
        parts = callback.data.split("_")
        order_id, product_id = int(parts[3]), int(parts[4])
        order = await session.get(Order, order_id)
        product = await session.get(Product, product_id)
        if not order or not product: return await callback.answer("–û—à–∏–±–∫–∞!", show_alert=True)

        products_dict = parse_products_string(order.products)
        if "change_qnt" in callback.data:
            new_quantity = products_dict.get(product.name, 0) + int(parts[5])
            if new_quantity > 0: products_dict[product.name] = new_quantity
            else: del products_dict[product.name]
        elif "delete_item" in callback.data and product.name in products_dict:
            del products_dict[product.name]

        order.products = build_products_string(products_dict)
        order.total_price = await recalculate_order_total(products_dict, session)
        await session.commit()
        await _display_edit_items_menu(callback.bot, callback.message.chat.id, callback.message.message_id, order_id, session)
        await callback.answer()

    @dp.callback_query(F.data.startswith("toggle_delivery_type_"))
    async def toggle_delivery_type(callback: CallbackQuery, session: AsyncSession):
        order_id = int(callback.data.split("_")[-1])
        order = await session.get(Order, order_id)
        if not order: return
        order.is_delivery = not order.is_delivery
        if not order.is_delivery: order.address = None
        await session.commit()
        await _display_edit_delivery_menu(callback.bot, callback.message.chat.id, callback.message.message_id, order_id, session)
        await callback.answer()

    @dp.callback_query(F.data.startswith("admin_add_item_start_"))
    async def admin_add_item_start(callback: CallbackQuery, session: AsyncSession):
        order_id = int(callback.data.split("_")[-1])
        categories = (await session.execute(select(Category).order_by(Category.sort_order, Category.name))).scalars().all()
        kb = InlineKeyboardBuilder()
        for cat in categories:
            kb.add(InlineKeyboardButton(text=cat.name, callback_data=f"admin_show_cat_{order_id}_{cat.id}_1"))
        kb.adjust(2)
        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–æ—Å—Ç–∞–≤—É –∑–∞–∫–∞–∑–∞", callback_data=f"edit_items_{order_id}"))
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup())

    @dp.callback_query(F.data.startswith("admin_show_cat_"))
    async def admin_show_category(callback: CallbackQuery, session: AsyncSession):
        order_id, category_id = map(int, callback.data.split("_")[3:5])
        products = (await session.execute(select(Product).where(Product.category_id == category_id, Product.is_active == True))).scalars().all()
        kb = InlineKeyboardBuilder()
        for prod in products:
            kb.add(InlineKeyboardButton(text=f"{prod.name} ({prod.price} –≥—Ä–Ω)", callback_data=f"admin_add_prod_{order_id}_{prod.id}"))
        kb.adjust(1)
        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=f"admin_add_item_start_{order_id}"))
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=kb.as_markup())

    @dp.callback_query(F.data.startswith("admin_add_prod_"))
    async def admin_add_to_order(callback: CallbackQuery, session: AsyncSession):
        order_id, product_id = map(int, callback.data.split("_")[3:])
        order = await session.get(Order, order_id)
        product = await session.get(Product, product_id)
        if not order or not product: return await callback.answer("–û—à–∏–±–∫–∞!", show_alert=True)
        products_dict = parse_products_string(order.products)
        products_dict[product.name] = products_dict.get(product.name, 0) + 1
        order.products = build_products_string(products_dict)
        order.total_price = await recalculate_order_total(products_dict, session)
        await session.commit()
        await _display_edit_items_menu(callback.bot, callback.message.chat.id, callback.message.message_id, order_id, session)
        await callback.answer(f"‚úÖ {product.name} –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

    @dp.callback_query(F.data.startswith("select_courier_"))
    async def select_courier_start(callback: CallbackQuery, session: AsyncSession):
        order_id = int(callback.data.split("_")[2])
        courier_role_res = await session.execute(select(Role).where(Role.can_be_assigned == True).limit(1))
        courier_role = courier_role_res.scalar_one_or_none()
        
        if not courier_role:
            return await callback.answer("–û—à–∏–±–∫–∞: –†–æ–ª—å '–ö—É—Ä—å–µ—Ä' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.", show_alert=True)
        
        couriers = (await session.execute(select(Employee).where(Employee.role_id == courier_role.id, Employee.is_on_shift == True).order_by(Employee.full_name))).scalars().all()
        
        kb = InlineKeyboardBuilder()
        text = f"<b>–ó–∞–∫–∞–∑ #{order_id}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—å–µ—Ä–∞ (üü¢ –ù–∞ —Å–º–µ–Ω–µ):"
        if not couriers:
            text = "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞ –Ω–∞ —Å–º–µ–Ω–µ."
        else:
            for courier in couriers:
                kb.add(InlineKeyboardButton(text=courier.full_name, callback_data=f"assign_courier_{order_id}_{courier.id}"))
            kb.adjust(2)
        
        kb.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ", callback_data=f"assign_courier_{order_id}_0"))
        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_order_{order_id}"))
        
        await callback.message.edit_text(text, reply_markup=kb.as_markup())
        await callback.answer()

    @dp.callback_query(F.data.startswith("assign_courier_"))
    async def assign_courier(callback: CallbackQuery, session: AsyncSession):
        settings = await session.get(Settings, 1)
        order_id, courier_id = map(int, callback.data.split("_")[2:])
        order = await session.get(Order, order_id)
        if not order: return await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)

        old_courier_id = order.courier_id
        new_courier_name = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

        if old_courier_id and old_courier_id != courier_id:
            old_courier = await session.get(Employee, old_courier_id)
            if old_courier and old_courier.telegram_user_id:
                try:
                    await callback.bot.send_message(old_courier.telegram_user_id, f"‚ùóÔ∏è –ó–∞–∫–∞–∑ #{order.id} –±—ã–ª —Å–Ω—è—Ç —Å –≤–∞—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –±—ã–≤—à–µ–≥–æ –∫—É—Ä—å–µ—Ä–∞ {old_courier.id}: {e}")

        if courier_id == 0:
            order.courier_id = None
        else:
            new_courier = await session.get(Employee, courier_id)
            if not new_courier: return await callback.answer("–ö—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            order.courier_id = courier_id
            new_courier_name = new_courier.full_name
            
            if new_courier.telegram_user_id:
                try:
                    kb_courier = InlineKeyboardBuilder()
                    statuses_res = await session.execute(select(OrderStatus).where(OrderStatus.visible_to_courier == True).order_by(OrderStatus.id))
                    statuses = statuses_res.scalars().all()
                    kb_courier.row(*[InlineKeyboardButton(text=s.name, callback_data=f"courier_set_status_{order.id}_{s.id}") for s in statuses])
                    if order.is_delivery and order.address:
                        encoded_address = quote_plus(order.address)
                        map_query = f"https://www.google.com/maps/search/?api=1&query={encoded_address}"
                        kb_courier.row(InlineKeyboardButton(text="üó∫Ô∏è –ù–∞ –∫–∞—Ä—Ç–µ", url=map_query))
                    await callback.bot.send_message(
                        new_courier.telegram_user_id,
                        f"üîî –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n<b>–ó–∞–∫–∞–∑ #{order.id}</b>\n–ê–¥—Ä–µ—Å: {html.quote(order.address or '–°–∞–º–æ–≤—ã–≤–æ–∑')}\n–°—É–º–º–∞: {order.total_price} –≥—Ä–Ω.",
                        reply_markup=kb_courier.as_markup()
                    )
                except Exception as e:
                    logging.error(f"Failed to notify new courier {new_courier.telegram_user_id}: {e}")
        
        await session.commit()
        
        if settings and settings.admin_chat_id:
            await callback.bot.send_message(settings.admin_chat_id, f"üë§ –ó–∞–∫–∞–∑—É #{order.id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∫—É—Ä—å–µ—Ä: <b>{html.quote(new_courier_name)}</b>")
        
        await _display_order_view(callback.bot, callback.message.chat.id, callback.message.message_id, order_id, session)
        await callback.answer(f"–ö—É—Ä—å–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω: {new_courier_name}")