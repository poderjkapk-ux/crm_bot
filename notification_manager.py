# notification_manager.py
import logging
from aiogram import Bot, html
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from urllib.parse import quote_plus

from models import Order, Settings, OrderStatus, Employee, Role

logger = logging.getLogger(__name__)


async def notify_new_order_to_staff(admin_bot: Bot, order: Order, session: AsyncSession):
    """
    –ù–∞–¥—Å–∏–ª–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ù–û–í–ï –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç —ñ –≤—Å—ñ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –∑–º—ñ–Ω—ñ.
    """
    settings = await session.get(Settings, 1)

    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    status_name = order.status.name if order.status else '–ù–µ–≤—ñ–¥–æ–º–∏–π'
    delivery_info = f"–ê–¥—Ä–µ—Å–∞: {html.quote(order.address or '–ù–µ –≤–∫–∞–∑–∞–Ω–∞')}" if order.is_delivery else '–°–∞–º–æ–≤–∏–≤—ñ–∑'
    time_info = f"–ß–∞—Å: {html.quote(order.delivery_time)}"
    source = f"–î–∂–µ—Ä–µ–ª–æ: {'–í–µ–±-—Å–∞–π—Ç' if order.user_id is None else 'Telegram-–±–æ—Ç'}"

    # –ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ —Ç–∞ –∞–¥–º—ñ–Ω-—á–∞—Ç—É
    admin_text = (f"<b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}</b> ({source})\n\n"
                  f"<b>–ö–ª—ñ—î–Ω—Ç:</b> {html.quote(order.customer_name)}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {html.quote(order.phone_number)}\n"
                  f"<b>{delivery_info}</b>\n<b>{time_info}</b>\n\n"
                  f"<b>–°—Ç—Ä–∞–≤–∏:</b>\n- {html.quote(order.products or '').replace(', ', '\n- ')}\n\n"
                  f"<b>–°—É–º–∞:</b> {order.total_price} –≥—Ä–Ω\n\n"
                  f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_name}")

    kb_admin = InlineKeyboardBuilder()
    statuses_res = await session.execute(
        select(OrderStatus).where(OrderStatus.visible_to_operator == True).order_by(OrderStatus.id)
    )
    status_buttons = [
        InlineKeyboardButton(text=s.name, callback_data=f"change_order_status_{order.id}_{s.id}")
        for s in statuses_res.scalars().all()
    ]
    for i in range(0, len(status_buttons), 2):
        kb_admin.row(*status_buttons[i:i+2])
    kb_admin.row(InlineKeyboardButton(text="üë§ –ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∫—É—Ä'—î—Ä–∞", callback_data=f"select_courier_{order.id}"))
    kb_admin.row(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"edit_order_{order.id}"))

    # 1. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –∑–∞–≥–∞–ª—å–Ω–∏–π –∞–¥–º—ñ–Ω-—á–∞—Ç (—è–∫ –ª–æ–≥)
    if settings and settings.admin_chat_id:
        try:
            await admin_bot.send_message(
                settings.admin_chat_id,
                "‚úÖ <b>–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>\n\n" + admin_text,
                reply_markup=kb_admin.as_markup()
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –∞–¥–º—ñ–Ω-—á–∞—Ç {settings.admin_chat_id}: {e}")

    # 2. –ü–æ—à—É–∫ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—Å—ñ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –∑–º—ñ–Ω—ñ
    operator_roles_res = await session.execute(select(Role.id).where(Role.can_manage_orders == True))
    operator_role_ids = operator_roles_res.scalars().all()

    if not operator_role_ids:
        logger.warning("–£ —Å–∏—Å—Ç–µ–º—ñ –Ω–µ–º–∞—î —Ä–æ–ª–µ–π –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏.")
        return

    operators_on_shift_res = await session.execute(
        select(Employee).where(
            Employee.role_id.in_(operator_role_ids),
            Employee.is_on_shift == True,
            Employee.telegram_user_id.is_not(None)
        )
    )
    operators = operators_on_shift_res.scalars().all()

    if not operators:
        logger.warning(f"–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}, –∞–ª–µ –Ω–µ–º–∞—î –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ –Ω–∞ –∑–º—ñ–Ω—ñ.")
        if settings and settings.admin_chat_id:
            try:
                await admin_bot.send_message(settings.admin_chat_id, "‚ùóÔ∏è<b>–£–í–ê–ì–ê: –ù–µ–º–∞—î –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ –Ω–∞ –∑–º—ñ–Ω—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>‚ùóÔ∏è")
            except Exception: pass
        return

    notification_text = "üîî <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏!</b>\n\n" + admin_text
    for operator in operators:
        try:
            await admin_bot.send_message(operator.telegram_user_id, notification_text, reply_markup=kb_admin.as_markup())
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator.id} ({operator.telegram_user_id}): {e}")


async def notify_all_parties_on_status_change(
    order: Order,
    old_status_name: str,
    actor_info: str, # "–û–ø–µ—Ä–∞—Ç–æ—Ä: [–Ü–º'—è]" –∞–±–æ "–ö—É—Ä'—î—Ä: [–Ü–º'—è]"
    admin_bot: Bot,
    client_bot: Bot | None,
    session: AsyncSession
):
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É.
    """
    await session.refresh(order, ['status', 'courier'])
    settings = await session.get(Settings, 1)
    new_status = order.status

    # 1. –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–∏–π –ê–î–ú–Ü–ù-–ß–ê–¢
    if settings and settings.admin_chat_id:
        log_message = (
            f"üîÑ <b>[–°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ]</b> –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}\n"
            f"<b>–ö–∏–º:</b> {html.quote(actor_info)}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> `{html.quote(old_status_name)}` ‚Üí `{html.quote(new_status.name)}`"
        )
        try:
            await admin_bot.send_message(settings.admin_chat_id, log_message)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ª–æ–≥ –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –≤ –∞–¥–º—ñ–Ω-—á–∞—Ç {settings.admin_chat_id}: {e}")

    # 2. –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ–º—É –ö–£–†'–Ñ–†–£ (—è–∫—â–æ –≤—ñ–Ω —î —ñ —Å—Ç–∞—Ç—É—Å –¥–ª—è –Ω—å–æ–≥–æ –≤–∏–¥–∏–º–∏–π)
    if order.courier and order.courier.telegram_user_id and "–û–ø–µ—Ä–∞—Ç–æ—Ä" in actor_info:
        courier_text = f"‚ùóÔ∏è –°—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞: <b>{new_status.name}</b>"
        try:
            await admin_bot.send_message(order.courier.telegram_user_id, courier_text)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∫—É—Ä'—î—Ä–∞ {order.courier.telegram_user_id}: {e}")

    # 3. –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ö–õ–Ü–Ñ–ù–¢–£ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
    if new_status.notify_customer and order.user_id and client_bot:
        client_text = f"–°—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: <b>{new_status.name}</b>"
        try:
            await client_bot.send_message(order.user_id, client_text)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ {order.user_id}: {e}")